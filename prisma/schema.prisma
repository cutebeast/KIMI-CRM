// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  name              String?
  emailVerified     DateTime?
  hashedPassword    String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  profile           Profile?
  transactions      Transaction[]
  rewardRedemptions RewardRedemption[]
  accounts          Account[]
  sessions          Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id            String   @id @default(cuid())
  userId        String   @unique
  loyaltyPoints Int      @default(0)
  tier          Tier     @default(BRONZE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  category    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  transactionItems TransactionItem[]
}

model Transaction {
  id         String   @id @default(cuid())
  userId     String
  totalAmount Decimal @db.Decimal(10, 2)
  transactionDate DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items      TransactionItem[]
}

model TransactionItem {
  id           String   @id @default(cuid())
  transactionId String
  productId    String
  quantity     Int      @default(1)
  priceAtTime  Decimal  @db.Decimal(10, 2)
  createdAt    DateTime @default(now())
  
  transaction  Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  product      Product     @relation(fields: [productId], references: [id])
}

model Reward {
  id          String   @id @default(cuid())
  name        String
  description String?
  pointsCost  Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  redemptions RewardRedemption[]
}

model RewardRedemption {
  id         String   @id @default(cuid())
  userId     String
  rewardId   String
  redeemedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reward     Reward   @relation(fields: [rewardId], references: [id])
}

enum Tier {
  BRONZE
  SILVER
  GOLD
}
